// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login page enzyme tests should be correctly 1`] = `
<Login
  loginWithEmail={[MockFunction]}
  loginWithGoogle={[MockFunction]}
>
  <WithStyles(ForwardRef(Container))
    className="login-form-container"
    maxWidth="xs"
  >
    <ForwardRef(Container)
      className="login-form-container"
      classes={
        Object {
          "disableGutters": "MuiContainer-disableGutters",
          "fixed": "MuiContainer-fixed",
          "maxWidthLg": "MuiContainer-maxWidthLg",
          "maxWidthMd": "MuiContainer-maxWidthMd",
          "maxWidthSm": "MuiContainer-maxWidthSm",
          "maxWidthXl": "MuiContainer-maxWidthXl",
          "maxWidthXs": "MuiContainer-maxWidthXs",
          "root": "MuiContainer-root",
        }
      }
      maxWidth="xs"
    >
      <div
        className="MuiContainer-root login-form-container MuiContainer-maxWidthXs"
      >
        <img
          alt="logo"
          src="test-file-stub"
        />
        <h3>
          Войдите в Ваш TestGround
        </h3>
        <form
          onSubmit={[Function]}
        >
          <WithStyles(ForwardRef(TextField))
            fullWidth={true}
            id="email"
            label="E-mail"
            onChange={[Function]}
            type="email"
            value=""
          >
            <ForwardRef(TextField)
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              fullWidth={true}
              id="email"
              label="E-mail"
              onChange={[Function]}
              type="email"
              value=""
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                required={false}
                variant="standard"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                  >
                    <WithStyles(ForwardRef(InputLabel))
                      htmlFor="email"
                      id="email-label"
                    >
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                        htmlFor="email"
                        id="email-label"
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={false}
                          htmlFor="email"
                          id="email-label"
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={false}
                            htmlFor="email"
                            id="email-label"
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                              data-shrink={false}
                              htmlFor="email"
                              id="email-label"
                            >
                              E-mail
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(Input))
                      autoFocus={false}
                      fullWidth={true}
                      id="email"
                      multiline={false}
                      onChange={[Function]}
                      type="email"
                      value=""
                    >
                      <ForwardRef(Input)
                        autoFocus={false}
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline",
                            "root": "MuiInput-root",
                            "underline": "MuiInput-underline",
                          }
                        }
                        fullWidth={true}
                        id="email"
                        multiline={false}
                        onChange={[Function]}
                        type="email"
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root MuiInput-underline",
                              "underline": null,
                            }
                          }
                          fullWidth={true}
                          id="email"
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          type="email"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                "input": "MuiInputBase-input MuiInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                              }
                            }
                            fullWidth={true}
                            id="email"
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            type="email"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiInput-input"
                                disabled={false}
                                id="email"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                type="email"
                                value=""
                              />
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(Input)>
                    </WithStyles(ForwardRef(Input))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(TextField))
            fullWidth={true}
            id="password"
            label="Пароль"
            onChange={[Function]}
            type="password"
            value=""
          >
            <ForwardRef(TextField)
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              fullWidth={true}
              id="password"
              label="Пароль"
              onChange={[Function]}
              type="password"
              value=""
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                required={false}
                variant="standard"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                  >
                    <WithStyles(ForwardRef(InputLabel))
                      htmlFor="password"
                      id="password-label"
                    >
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                        htmlFor="password"
                        id="password-label"
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={false}
                          htmlFor="password"
                          id="password-label"
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={false}
                            htmlFor="password"
                            id="password-label"
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                              data-shrink={false}
                              htmlFor="password"
                              id="password-label"
                            >
                              Пароль
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(Input))
                      autoFocus={false}
                      fullWidth={true}
                      id="password"
                      multiline={false}
                      onChange={[Function]}
                      type="password"
                      value=""
                    >
                      <ForwardRef(Input)
                        autoFocus={false}
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline",
                            "root": "MuiInput-root",
                            "underline": "MuiInput-underline",
                          }
                        }
                        fullWidth={true}
                        id="password"
                        multiline={false}
                        onChange={[Function]}
                        type="password"
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root MuiInput-underline",
                              "underline": null,
                            }
                          }
                          fullWidth={true}
                          id="password"
                          inputComponent="input"
                          multiline={false}
                          onChange={[Function]}
                          type="password"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                "input": "MuiInputBase-input MuiInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                              }
                            }
                            fullWidth={true}
                            id="password"
                            inputComponent="input"
                            multiline={false}
                            onChange={[Function]}
                            type="password"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiInput-input"
                                disabled={false}
                                id="password"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                type="password"
                                value=""
                              />
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(Input)>
                    </WithStyles(ForwardRef(Input))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(Button))
            className="ground_btn"
            color="primary"
            fullWidth={true}
            id="login-btn"
            type="submit"
            variant="contained"
          >
            <ForwardRef(Button)
              className="ground_btn"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              fullWidth={true}
              id="login-btn"
              type="submit"
              variant="contained"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-contained ground_btn MuiButton-containedPrimary MuiButton-fullWidth"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="login-btn"
                type="submit"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-contained ground_btn MuiButton-containedPrimary MuiButton-fullWidth"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  id="login-btn"
                  type="submit"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-contained ground_btn MuiButton-containedPrimary MuiButton-fullWidth"
                    disabled={false}
                    id="login-btn"
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="submit"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Войти
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
          <WithStyles(ForwardRef(Button))
            fullWidth={true}
            href="/registration"
          >
            <ForwardRef(Button)
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              fullWidth={true}
              href="/registration"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-text MuiButton-fullWidth"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                href="/registration"
                type="button"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-text MuiButton-fullWidth"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  href="/registration"
                  type="button"
                >
                  <a
                    aria-disabled={false}
                    className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-fullWidth"
                    href="/registration"
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Зарегистрироваться
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </a>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </form>
        <h4>
          или
        </h4>
        <WithStyles(ForwardRef(Button))
          id="google-btn"
          onClick={[Function]}
          size="large"
          variant="outlined"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            id="google-btn"
            onClick={[Function]}
            size="large"
            variant="outlined"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-outlined MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              id="google-btn"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-outlined MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="google-btn"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-outlined MuiButton-outlinedSizeLarge MuiButton-sizeLarge"
                  disabled={false}
                  id="google-btn"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    <img
                      alt="google logo"
                      className="google_logo"
                      src="https://www.gstatic.com/mobilesdk/160512_mobilesdk/auth_service_google.svg"
                    />
                    Войти с Google
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </div>
    </ForwardRef(Container)>
  </WithStyles(ForwardRef(Container))>
</Login>
`;
