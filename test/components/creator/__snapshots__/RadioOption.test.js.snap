// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RadioOption should render correctly 1`] = `
<RadioOption
  handleChange={[MockFunction]}
  option={
    Object {
      "id": 1,
      "isRight": true,
      "text": "Text",
    }
  }
  remove={[MockFunction]}
>
  <WithStyles(ForwardRef(FormControlLabel))
    className="option-label"
    control={
      <ForwardRef(WithStyles)
        color="primary"
        id="isRight.1"
        value={1}
      />
    }
    label={
      <ForwardRef(WithStyles)
        InputProps={
          Object {
            "endAdornment": <RemoveOptionButton
              id={1}
              remove={[MockFunction]}
            />,
          }
        }
        fullWidth={true}
        id="text.1"
        onChange={[MockFunction]}
        value="Text"
      />
    }
    value={1}
  >
    <ForwardRef(FormControlLabel)
      className="option-label"
      classes={
        Object {
          "disabled": "Mui-disabled",
          "label": "MuiFormControlLabel-label",
          "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
          "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
          "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
          "root": "MuiFormControlLabel-root",
        }
      }
      control={
        <ForwardRef(WithStyles)
          color="primary"
          id="isRight.1"
          value={1}
        />
      }
      label={
        <ForwardRef(WithStyles)
          InputProps={
            Object {
              "endAdornment": <RemoveOptionButton
                id={1}
                remove={[MockFunction]}
              />,
            }
          }
          fullWidth={true}
          id="text.1"
          onChange={[MockFunction]}
          value="Text"
        />
      }
      value={1}
    >
      <label
        className="MuiFormControlLabel-root option-label"
      >
        <WithStyles(ForwardRef(Radio))
          color="primary"
          id="isRight.1"
          value={1}
        >
          <ForwardRef(Radio)
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiRadio-colorPrimary",
                "colorSecondary": "MuiRadio-colorSecondary",
                "disabled": "Mui-disabled",
                "root": "MuiRadio-root",
              }
            }
            color="primary"
            id="isRight.1"
            value={1}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checkedIcon={
                <ForwardRef(WithStyles)
                  checked={true}
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiRadio-root MuiRadio-colorPrimary",
                }
              }
              color="primary"
              icon={
                <ForwardRef(WithStyles)
                  fontSize="default"
                />
              }
              id="isRight.1"
              onChange={[Function]}
              type="radio"
              value={1}
            >
              <ForwardRef(SwitchBase)
                checkedIcon={
                  <ForwardRef(WithStyles)
                    checked={true}
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-13 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-14 Mui-disabled",
                    "input": "PrivateSwitchBase-input-15",
                    "root": "PrivateSwitchBase-root-12 MuiRadio-root MuiRadio-colorPrimary",
                  }
                }
                color="primary"
                icon={
                  <ForwardRef(WithStyles)
                    fontSize="default"
                  />
                }
                id="isRight.1"
                onChange={[Function]}
                type="radio"
                value={1}
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-12 MuiRadio-root MuiRadio-colorPrimary"
                  color="primary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-12 MuiRadio-root MuiRadio-colorPrimary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="primary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-12 MuiRadio-root MuiRadio-colorPrimary MuiIconButton-colorPrimary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-12 MuiRadio-root MuiRadio-colorPrimary MuiIconButton-colorPrimary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-12 MuiRadio-root MuiRadio-colorPrimary MuiIconButton-colorPrimary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              className="PrivateSwitchBase-input-15"
                              id="isRight.1"
                              onChange={[Function]}
                              type="radio"
                              value={1}
                            />
                            <WithStyles(RadioButtonIcon)
                              fontSize="default"
                            >
                              <RadioButtonIcon
                                classes={
                                  Object {
                                    "checked": "PrivateRadioButtonIcon-checked-30",
                                    "layer": "PrivateRadioButtonIcon-layer-29",
                                    "root": "PrivateRadioButtonIcon-root-28",
                                  }
                                }
                                fontSize="default"
                              >
                                <div
                                  className="PrivateRadioButtonIcon-root-28"
                                >
                                  <ForwardRef
                                    fontSize="default"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      fontSize="default"
                                    >
                                      <ForwardRef(SvgIcon)
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                        fontSize="default"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                  <ForwardRef
                                    className="PrivateRadioButtonIcon-layer-29"
                                    fontSize="default"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      className="PrivateRadioButtonIcon-layer-29"
                                      fontSize="default"
                                    >
                                      <ForwardRef(SvgIcon)
                                        className="PrivateRadioButtonIcon-layer-29"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                        fontSize="default"
                                      >
                                        <svg
                                          aria-hidden="true"
                                          className="MuiSvgIcon-root PrivateRadioButtonIcon-layer-29"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef>
                                </div>
                              </RadioButtonIcon>
                            </WithStyles(RadioButtonIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Radio)>
        </WithStyles(ForwardRef(Radio))>
        <WithStyles(ForwardRef(Typography))
          className="MuiFormControlLabel-label"
          component="span"
        >
          <ForwardRef(Typography)
            className="MuiFormControlLabel-label"
            classes={
              Object {
                "alignCenter": "MuiTypography-alignCenter",
                "alignJustify": "MuiTypography-alignJustify",
                "alignLeft": "MuiTypography-alignLeft",
                "alignRight": "MuiTypography-alignRight",
                "body1": "MuiTypography-body1",
                "body2": "MuiTypography-body2",
                "button": "MuiTypography-button",
                "caption": "MuiTypography-caption",
                "colorError": "MuiTypography-colorError",
                "colorInherit": "MuiTypography-colorInherit",
                "colorPrimary": "MuiTypography-colorPrimary",
                "colorSecondary": "MuiTypography-colorSecondary",
                "colorTextPrimary": "MuiTypography-colorTextPrimary",
                "colorTextSecondary": "MuiTypography-colorTextSecondary",
                "displayBlock": "MuiTypography-displayBlock",
                "displayInline": "MuiTypography-displayInline",
                "gutterBottom": "MuiTypography-gutterBottom",
                "h1": "MuiTypography-h1",
                "h2": "MuiTypography-h2",
                "h3": "MuiTypography-h3",
                "h4": "MuiTypography-h4",
                "h5": "MuiTypography-h5",
                "h6": "MuiTypography-h6",
                "noWrap": "MuiTypography-noWrap",
                "overline": "MuiTypography-overline",
                "paragraph": "MuiTypography-paragraph",
                "root": "MuiTypography-root",
                "srOnly": "MuiTypography-srOnly",
                "subtitle1": "MuiTypography-subtitle1",
                "subtitle2": "MuiTypography-subtitle2",
              }
            }
            component="span"
          >
            <span
              className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
            >
              <WithStyles(ForwardRef(TextField))
                InputProps={
                  Object {
                    "endAdornment": <RemoveOptionButton
                      id={1}
                      remove={[MockFunction]}
                    />,
                  }
                }
                fullWidth={true}
                id="text.1"
                onChange={[MockFunction]}
                value="Text"
              >
                <ForwardRef(TextField)
                  InputProps={
                    Object {
                      "endAdornment": <RemoveOptionButton
                        id={1}
                        remove={[MockFunction]}
                      />,
                    }
                  }
                  classes={
                    Object {
                      "root": "MuiTextField-root",
                    }
                  }
                  fullWidth={true}
                  id="text.1"
                  onChange={[MockFunction]}
                  value="Text"
                >
                  <WithStyles(ForwardRef(FormControl))
                    className="MuiTextField-root"
                    color="primary"
                    disabled={false}
                    error={false}
                    fullWidth={true}
                    required={false}
                    variant="standard"
                  >
                    <ForwardRef(FormControl)
                      className="MuiTextField-root"
                      classes={
                        Object {
                          "fullWidth": "MuiFormControl-fullWidth",
                          "marginDense": "MuiFormControl-marginDense",
                          "marginNormal": "MuiFormControl-marginNormal",
                          "root": "MuiFormControl-root",
                        }
                      }
                      color="primary"
                      disabled={false}
                      error={false}
                      fullWidth={true}
                      required={false}
                      variant="standard"
                    >
                      <div
                        className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                      >
                        <WithStyles(ForwardRef(Input))
                          autoFocus={false}
                          endAdornment={
                            <RemoveOptionButton
                              id={1}
                              remove={[MockFunction]}
                            />
                          }
                          fullWidth={true}
                          id="text.1"
                          multiline={false}
                          onChange={[MockFunction]}
                          value="Text"
                        >
                          <ForwardRef(Input)
                            autoFocus={false}
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root",
                                "underline": "MuiInput-underline",
                              }
                            }
                            endAdornment={
                              <RemoveOptionButton
                                id={1}
                                remove={[MockFunction]}
                              />
                            }
                            fullWidth={true}
                            id="text.1"
                            multiline={false}
                            onChange={[MockFunction]}
                            value="Text"
                          >
                            <WithStyles(ForwardRef(InputBase))
                              autoFocus={false}
                              classes={
                                Object {
                                  "colorSecondary": "MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "formControl": "MuiInput-formControl",
                                  "fullWidth": "MuiInput-fullWidth",
                                  "input": "MuiInput-input",
                                  "inputMarginDense": "MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInput-marginDense",
                                  "multiline": "MuiInput-multiline",
                                  "root": "MuiInput-root MuiInput-underline",
                                  "underline": null,
                                }
                              }
                              endAdornment={
                                <RemoveOptionButton
                                  id={1}
                                  remove={[MockFunction]}
                                />
                              }
                              fullWidth={true}
                              id="text.1"
                              inputComponent="input"
                              multiline={false}
                              onChange={[MockFunction]}
                              type="text"
                              value="Text"
                            >
                              <ForwardRef(InputBase)
                                autoFocus={false}
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart",
                                    "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "focused": "Mui-focused Mui-focused",
                                    "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                    "input": "MuiInputBase-input MuiInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                    "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                  }
                                }
                                endAdornment={
                                  <RemoveOptionButton
                                    id={1}
                                    remove={[MockFunction]}
                                  />
                                }
                                fullWidth={true}
                                id="text.1"
                                inputComponent="input"
                                multiline={false}
                                onChange={[MockFunction]}
                                type="text"
                                value="Text"
                              >
                                <div
                                  className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                  onClick={[Function]}
                                >
                                  <input
                                    aria-invalid={false}
                                    autoFocus={false}
                                    className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                    disabled={false}
                                    id="text.1"
                                    onAnimationStart={[Function]}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    type="text"
                                    value="Text"
                                  />
                                  <RemoveOptionButton
                                    id={1}
                                    remove={[MockFunction]}
                                  >
                                    <WithStyles(ForwardRef(InputAdornment))
                                      position="end"
                                    >
                                      <ForwardRef(InputAdornment)
                                        classes={
                                          Object {
                                            "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                            "filled": "MuiInputAdornment-filled",
                                            "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                            "marginDense": "MuiInputAdornment-marginDense",
                                            "positionEnd": "MuiInputAdornment-positionEnd",
                                            "positionStart": "MuiInputAdornment-positionStart",
                                            "root": "MuiInputAdornment-root",
                                          }
                                        }
                                        position="end"
                                      >
                                        <div
                                          className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                        >
                                          <ForwardRef
                                            className="remove-icon"
                                            id={1}
                                            onClick={[MockFunction]}
                                          >
                                            <WithStyles(ForwardRef(SvgIcon))
                                              className="remove-icon"
                                              id={1}
                                              onClick={[MockFunction]}
                                            >
                                              <ForwardRef(SvgIcon)
                                                className="remove-icon"
                                                classes={
                                                  Object {
                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                    "colorError": "MuiSvgIcon-colorError",
                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                    "root": "MuiSvgIcon-root",
                                                  }
                                                }
                                                id={1}
                                                onClick={[MockFunction]}
                                              >
                                                <svg
                                                  aria-hidden="true"
                                                  className="MuiSvgIcon-root remove-icon"
                                                  focusable="false"
                                                  id={1}
                                                  onClick={[MockFunction]}
                                                  viewBox="0 0 24 24"
                                                >
                                                  <path
                                                    d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"
                                                  />
                                                </svg>
                                              </ForwardRef(SvgIcon)>
                                            </WithStyles(ForwardRef(SvgIcon))>
                                          </ForwardRef>
                                        </div>
                                      </ForwardRef(InputAdornment)>
                                    </WithStyles(ForwardRef(InputAdornment))>
                                  </RemoveOptionButton>
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(Input)>
                        </WithStyles(ForwardRef(Input))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
            </span>
          </ForwardRef(Typography)>
        </WithStyles(ForwardRef(Typography))>
      </label>
    </ForwardRef(FormControlLabel)>
  </WithStyles(ForwardRef(FormControlLabel))>
</RadioOption>
`;
